{"version":3,"sources":["Components/Items/Items.js","Components/Home/Home.js","Components/Signup/Signup.js","Components/Login/Login.js","Components/Item/Item.js","App.js","serviceWorker.js","index.js"],"names":["Items","props","className","onClick","clicked","name","src","image","alt","Home","useState","data","setData","useEffect","axios","get","then","response","catch","error","console","map","item","key","_id","to","Signup","Login","input","setInput","password","setPassword","type","placeholder","value","onChange","event","target","required","post","mail","status","localStorage","setItem","history","push","pathname","Item","match","params","id","category","initialprice","bidprice","bidder","description","App","isLoggedIn","setLogin","getItem","sidemenu","document","getElementById","classList","length","add","remove","sidemenuicon","removeItem","clear","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8d45cbd1.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Items.css';\r\n\r\nconst Items = (props) => {\r\n\r\n    return (   \r\n              <div className='Card' onClick={props.clicked}>\r\n              <h2>{props.name}</h2>\r\n              <img className='Image' src={props.image} alt=\"frame\"></img>\r\n              </div>\r\n    );\r\n};\r\n\r\nexport default Items;","import React,{useEffect, useState} from 'react';\r\nimport './Home.css';\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Items from '../Items/Items';\r\n\r\n\r\nconst Home = (props) => {\r\n\r\n    const [data,setData] = useState([]);\r\n\r\n    const start = () => {\r\n      axios.get('https://react-auction-server.herokuapp.com/sell')\r\n      .then((response) => {\r\n        setData(response.data);\r\n      })\r\n      .catch((error) => console.error(error))\r\n    }\r\n\r\n    useEffect(() => {\r\n      start();\r\n    },[]);\r\n\r\n    return (\r\n        data.map((item) => {\r\n          return (<Link key={item._id} to={'/react-auction/items/' + item._id}>\r\n                      <Items  \r\n                        name={item.name}\r\n                        image={item.image}\r\n                        ></Items></Link>)\r\n        })\r\n    );\r\n};\r\n\r\nexport default Home;","import React from 'react';\r\n\r\nconst Signup = () => {\r\n    return (\r\n        <div>\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Signup;","import React, { useState } from 'react';\r\nimport './Login.css';\r\nimport axios from 'axios';\r\n\r\nconst Login = (props) => {\r\n\r\n    const [input, setInput] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    const loginHandler = () => {\r\n        axios.post('https://react-auction-server.herokuapp.com/signin',{mail:input,password:password})\r\n        .then((response) => {\r\n            if(response.data.status !== 'OK'){\r\n                console.error('Authentication Failed')\r\n            }else{\r\n                localStorage.setItem('auctionUser',input);\r\n                props.history.push({pathname : '/react-auction/'});\r\n            }\r\n        })\r\n        .catch(error => console.error(error));\r\n    }\r\n\r\n    const getInputHandler = (event) => {\r\n        setInput(event.target.value);\r\n    }\r\n\r\n    const getPasswordHandler = (event) => {\r\n        setPassword(event.target.value)\r\n    }\r\n\r\n    return (\r\n        <div className='Main'>\r\n            <input type='text' placeholder=\"Email\" value={input} onChange={getInputHandler} required></input><br></br>                <input type='password' placeholder=\"Password\" value={password} onChange={getPasswordHandler} required></input><br></br>\r\n            <button onClick={loginHandler}>Login</button>\r\n            </div>\r\n    );\r\n    \r\n}\r\n\r\nexport default Login;","import React, {useEffect, useState} from 'react';\r\nimport './Item.css';\r\nimport axios from 'axios';\r\n\r\nconst Item = (props) => {\r\n\r\n    const [Item,setItem] = useState([]);\r\n\r\n    const run = () => {\r\n        axios.get('https://react-auction-server.herokuapp.com/getitem?_id='+props.match.params.id)\r\n        .then((response) => {\r\n            response.data.map(item => {\r\n                return setItem(item);\r\n            })\r\n        })\r\n        .catch((error) => console.error(error))\r\n      }\r\n  \r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    useEffect(()=>{run();},[]);\r\n\r\n    return (\r\n        <div>\r\n              <h1>{Item.name}</h1>\r\n              <img className='Image' src={Item.image} alt=\"frame\"></img>\r\n              <p>By {Item.mail}</p>\r\n              <p>Category: <b>{Item.category}</b></p>\r\n              <p>Initial Price: {Item.initialprice}₹</p>\r\n              <p>Present Bid Price: {Item.bidprice}₹ (By {Item.bidder})</p>\r\n              <p className='Description'>About: {Item.description}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Item;","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { BrowserRouter, Route, Link } from 'react-router-dom';\n\nimport Home from '../src/Components/Home/Home';\nimport Signup from '../src/Components/Signup/Signup';\nimport Login from '../src/Components/Login/Login';\nimport Item from '../src/Components/Item/Item';\n\nconst App = (props) => {\n\n  const [isLoggedIn,setLogin] = useState(false);\n\n  useEffect(()=>{\n    if(!localStorage.getItem('auctionUser')){\n      setLogin(false);\n    }else{\n      setLogin(true)\n    }\n  },[isLoggedIn])\n\n  const sideMenuHandler = () => {\n    const sidemenu = document.getElementById('sidemenu');\n    sidemenu.classList.length === 1 ? sidemenu.classList.add('active') : sidemenu.classList.remove('active');\n    const sidemenuicon = document.getElementById('sidemenuicon');\n    sidemenuicon.classList.length === 2 ? sidemenuicon.classList.remove('active') && sidemenu.classList.add('sideDiv')  : sidemenuicon.classList.add('active') && sidemenu.classList.add('sideDiv');\n  }\n\n  const logoutHandler = () => {\n    localStorage.removeItem('auctionUser');\n    localStorage.clear();\n\n  }\n\n  return (\n    <BrowserRouter>\n        <div className=\"App\">\n          <nav>\n            <Link to='/react-auction/'>Home</Link>\n            <ul>\n                {isLoggedIn ? null : <li><Link to='/react-auction/login'>Login</Link></li>}\n            </ul>\n            <div onClick={sideMenuHandler} id='sidemenuicon' className='container'>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            </div>\n          </nav>\n          <div id='sidemenu' className='sideDiv'><p onClick={logoutHandler}>Logout</p></div>\n          <Route path='/react-auction/' exact component={Home}/>\n          <Route path='/react-auction/login' exact component={Login}/>\n          <Route path='/react-auction/signup' exact component={Signup}/>\n          <Route path='/react-auction/items/:id' exact component={Item}/>\n        </div>\n        </BrowserRouter>\n  );\n}\n\nexport default App; ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}